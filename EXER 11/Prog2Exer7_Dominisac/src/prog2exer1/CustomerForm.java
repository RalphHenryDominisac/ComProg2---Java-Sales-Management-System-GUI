/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prog2exer1;

import java.awt.Color;
import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DateFormat;
import javax.swing.JOptionPane;
import java.time.LocalDate;

import java.time.Period;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Objects;
import javax.swing.table.DefaultTableModel;


import com.itextpdf.text.BaseColor;
import java.io.BufferedWriter;
import java.io.FileWriter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;




/**
 *
 * @author RALPH
 */
public class CustomerForm extends javax.swing.JFrame {
    ArrayList<Integer> deletedID = new ArrayList<Integer>();
   
    int increSave = 1;
 //   int stringID;
//    String strID;
    
    int id = 0;
//    int id2 = 0;
    String[][] cust = new String[10][7];
  //  String[][] cust = new String[100][7];   // If I set the limitation to 100, the index out of bounds 10 will be gone but the display of the appended values duplicates the existing values
    
    String[][][] custproddd = new String[10][10][7];
    //  String[][] cust = new String[100][7];
    String [][][] custprod = new String[10][10][7]; //3D string
    Products productsclass = new Products();
    String [] invoice = {"100", "101", "102", "103", "104", "105", "106", "107", "108", "109"};
    
    int [] invoiceInt = {100, 101, 102, 103, 104, 105, 106, 107, 108, 109};
    
    
   // String [] item = new String [7];
//    String [][] itemTo2D  = new String[10][7];
    int indexerItem = 0;
 

    
    
    String [][] read2DString = new String[10][7];   // 2D array where the contents of the CSV file will be inserted (can only get 10 unique values of 7 columns)
    int custIndexer = 0;
    int setrowcount = 0;
    int setrowcount2 = 0;
    
    
    
    
    
    
    
    
   
    
    
    
    /**
     * Creates new form CustomerForm
     */
    public CustomerForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel3 = new javax.swing.JLabel();
        jMenu5 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        cname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cgender = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cid = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cemail = new javax.swing.JTextField();
        elabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbday = new javax.swing.JTextField();
        bdaylabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        custname = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        custcontact = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mainTable2 = new javax.swing.JTable();
        addProdButton = new javax.swing.JButton();
        printInvoiceee = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jLabel3.setText("jLabel3");

        jMenu5.setText("jMenu5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Customer Address");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Customer Registration System");

        cgender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Customer ID");

        jLabel5.setText("Customer E-mail");

        cemail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cemailKeyReleased(evt);
            }
        });

        elabel.setText("[a-z]@[a-z].com");

        jLabel6.setText("Customer Bday");

        cbday.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbdayKeyReleased(evt);
            }
        });

        bdaylabel.setText("mm/dd/yyyy");

        jLabel7.setText("Customer Name");

        jLabel8.setText("lastname, firstname");

        jLabel9.setText("Customer Contact #");

        jLabel10.setText("Customer Gender");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Address", "Contact", "Email", "Bday", "Gender"
            }
        ));
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mainTable);

        mainTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Invoice No.", "Prod ID", "Prod Type", "Prod Desc", "Prod Quantity", "Unit Price", "Date"
            }
        ));
        jScrollPane2.setViewportView(mainTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        addProdButton.setText("Add Product");
        addProdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProdButtonActionPerformed(evt);
            }
        });

        printInvoiceee.setText("Print Invoice");
        printInvoiceee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInvoiceeeActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        jMenuItem1.setText("Products");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Orders");
        jMenu3.add(jMenuItem2);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(26, 26, 26)
                                        .addComponent(cemail))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cbday))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(custname)
                                            .addComponent(cname)
                                            .addComponent(custcontact)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cid, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(elabel)
                                    .addComponent(jLabel8)
                                    .addComponent(bdaylabel)
                                    .addComponent(printInvoiceee)))
                            .addComponent(addProdButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(updateButton)
                            .addComponent(deleteButton)
                            .addComponent(jButton1))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(custname)
                    .addComponent(jLabel8))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cname))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(custcontact))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cemail)
                    .addComponent(elabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbday)
                    .addComponent(bdaylabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(printInvoiceee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addProdButton)
                .addGap(184, 184, 184))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cemailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cemailKeyReleased
        Boolean at = false;
        Boolean dotcom = false;
        
        for(int x = 1; x <= cemail.getText().length(); x++) {
            if(cemail.getText().substring(x-1, x).equals("@") && x > 3){  // Checks the text field if there is an @ and if the characters are greater than 3 
                at = true;  // If the if condition is true, at is set to true
                        
            } else{
                elabel.setForeground(Color.red);
                elabel.setText("Bad E-mail");
            }
         
         if(x > 5 && cemail.getText().substring(x-4, x).equals(".com") && at == true ){ // Checks if the characters are greater than 5(probably after @) and checks if there is a .com and at must be true(if it founds an @ sign)   
                dotcom = true; // If the if conodition is true, dotcom is set to true
                        
            } else{
                elabel.setForeground(Color.red);
                elabel.setText("Bad E-mail");
            }
         
         if(at == true && dotcom == true){  // If both at and dotcom are true, it will return a message saying "Good E-mail"
                elabel.setForeground(Color.green);
                elabel.setText("Good E-mail");
         }
         
             
         
        }
        
        if(cemail.getText().length() == 0){
                elabel.setForeground(Color.red);
                elabel.setText("Empty E-mail input!");
        }
        
        
        
    }//GEN-LAST:event_cemailKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     System.out.println(custIndexer);
        
        /*   
        DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
        
       if(id == 0)
        tblmodel.setRowCount(0);
        
   
       
        String[] item = {cid.getText(), custname.getText(), cname.getText(), custcontact.getText(), cemail.getText(), cbday.getText(), cgender.getSelectedItem().toString()};
        tblmodel.addRow(item);
        
   
        id++;
        */
       /*
        try{
            
            for(int y = 0; y < 7; y++){
                cust[id][y] = item[y];
            }
            
            
        } catch(Exception e){
            System.out.println("Exception: " + e);
        }
        
        for(int x = 0; x < cust.length;x++){
            for(int y = 0; y < cust[0].length; y++){
                System.out.print(cust[x][y]);
                
            }
            System.out.println("");
        }
        
        id++;
        */

        
        
        
         String inputField = cname.getText();
         String inputEMAIL = cemail.getText();
         String inputBDAY = cbday.getText();
         String inputName = custname.getText();
         String inputNumber = custcontact.getText();
         
         
         Boolean saveInput = false;
        if(inputField.length() == 0 || inputEMAIL.length() == 0 || inputBDAY.length() == 0 || inputName.length() == 0 || inputNumber.length() == 0 ){ // If inputs are left blank, it will return a prompt message
              messagebox("Input fields should not be left blank", "Record");  
              
          }
        else if(inputField.length() != 0 || inputEMAIL.length() != 0 || inputBDAY.length() != 0 || inputName.length() != 0 || inputNumber.length() != 0){  // If all inputs are not blank, saveInput is set to true
               saveInput = true;
         }
          
   ////////////////////////////////////////////////////////////////////////////////////     
        Boolean at = false;
        Boolean dotcom = false;
        Boolean dotcomAt = false;
       
        
        String cEMAIL = cemail.getText();
        
        for(int x = 1; x <= cEMAIL.length(); x++) {
            if(cEMAIL.substring(x-1, x).equals("@") && x > 3){  // Checks the text field if there is an @ and if the characters are greater than 3 
                at = true;  // If the if condition is true, at is set to true
                        
            } else{
              
            }
         
         if(x > 5 && cEMAIL.substring(x-4, x).equals(".com") && at == true ){ // Checks if the characters are greater than 5(probably after @) and checks if there is a .com and at must be true(if it founds an @ sign)   
                dotcom = true; // If the if conodition is true, dotcom is set to true
                        
            } else{
             
           
            }
         
         if(at == true && dotcom == true){  // If both at and dotcom are true, it will return a message saying "Good E-mail"
             
             dotcomAt = true;
         }
        
        } 
        
       
        
        
        
        
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////       
   Boolean et = false;

         String cBDAY = cbday.getText();

         Boolean isCorrect = valDOB(cBDAY); // Calls valDOB which checks if the input is in correct date format
         
         
         
        for(int y = 1; y <= cBDAY.length(); y++){  // Iterates(travels) through the birth date input text field
            
            
         if(isCorrect == true && y > 9){  // If isCorrect is true and input is greater than 9(characters), it returns a label message
             
               et = true;
         } 
         
         else {     
              
         }
         
     }
        
      

        
///////////////////////////////////////////////////  
        
         Boolean saveAge = false;
         String cBdayAge = cbday.getText();
         int resultAge = ageCalc(cBdayAge); // ageCalc calculates the age
         if(resultAge > 0 && resultAge < 18){      // If resultAge(which holds the age value) is < 18, it will return a prompt message
             messagebox("Cannot accept minors!", "Record");
             
         }
         else if(resultAge >= 18){   // If resultAge >= 18 , saveAge is set to true
             saveAge = true;
         }
         
       
         
        
/////////////////////////////////////////////////////////                    
       
  

       
        
        String emailLabel = elabel.getText();
        String bdayLabel = bdaylabel.getText();
      
        
        
        if(saveInput == true && saveAge == true && dotcomAt == true && et == true ){  // If both saveInput and saveAge are set to true, customer can be saved, customer ID is then incremented
                if(deletedID.isEmpty()){
                 messagebox("Save!", "Record");
                 cid.setText(String.valueOf(custIndexer+1));
                    
                } else{
                    
                     messagebox("Save!", "Record");
        
                     cid.setText(String.valueOf(deletedID.get(0)));  //Access elements of the deletedID arraylist and put it as an ID
                        
                     int indx = 0;
                     deletedID.remove(indx);   // deletes first index after it is used    
                     indx++;
                      
                        
                     
                        
                     
                     
                          // int delIndx = deletedID.get(0) - 1;
        
                        /*
                       ListIterator<Integer> iterate = deletedID.listIterator();
                           while(iterate.hasNext()){
                           Integer num = iterate.next();
                           num = deletedID.get(0);
                           if(num.equals(deletedID.get(0)))
                           deletedID.remove(num);
                               }
                        */
      
                   
                        
                }
                
                
             // cid.setText(String.valueOf(Integer.parseInt(cid.getText()) + 1));
         }
        
         if(emailLabel.equals("Bad E-mail")){
           messagebox("Cannot accept bad e-mail format!", "Record");
        }
         
         //  String daty = cbday.getText();  // date string
        //   int clcltdAge =  ageCalc(daty);
         if(bdayLabel.equals("Bad Date Format")){
            messagebox("Cannot accept bad date format!", "Record");
        }
       
         
         
         
         
   
         DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
      // if(id == 0)
    //    tblmodel.setRowCount(0);
      //  String[] item = {cid.getText(), custname.getText(), cname.getText(), custcontact.getText(), cemail.getText(), cbday.getText(), cgender.getSelectedItem().toString()};
          String getDaID = cid.getText();
          String getDaCustName = custname.getText();
          String getDaCname = cname.getText();
          String getCustContact = custcontact.getText();
          String getDaEmail = cemail.getText();
          String getCBday = cbday.getText();
          String getDaGender = cgender.getSelectedItem().toString();
          
          String [] item = {getDaID, getDaCustName, getDaCname, getCustContact, getDaEmail, getCBday, getDaGender};
          
       // tblmodel.addRow(item);
        
      
       
        for (int m = 0; m < item.length; m++){   // transfer item string to static 2D array(itemTo2D)
            cust[custIndexer][m] = item[m];
        }
        
        
        /*
        for(int v = 0; v < itemTo2D.length; v++){
            for(int w = 0; w < itemTo2D[0].length; w++){
                cust[custIndexer][w] = read2DString[v][w];
                
            }
        }
        */
        tblmodel.addRow(cust[custIndexer]); //displays 2D array on the maintable(first table)
      
        
       
      
        
        
        
        
        
//        for(int j = 0; j < itemTo2D.length; j++){ //Prints out the values of itemTo2D
//            for(int k = 0; k < itemTo2D[j].length; k++){
//             //   System.out.println(itemTo2D[j][k] + ",");
//            }
//        }
        
        
      //  id++;
//        indexerItem++; //increments the index of 2D array(itemTo2D)
        custIndexer++;
        

   
          writeCustomerCSV(); // calls writeCustomerCSV after the user inputs values to the textfields and clicks save 
          writeDeletedIDCSV();
//          readCustomerCSV(); // calls  readCustomerCSV after the user inputs values to the textfields and clicks save 
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void writeCustomerCSV(){  // this creates a CSV file which stores the inputs of the user
     
        try{
         //  BufferedWriter bw = new BufferedWriter(new FileWriter("C:\\Users\\RALPH\\Documents\\Database Java CSV\\customers.csv", true));  // when I set append mode to true,  cust[read2DStringIndex][newVarIndexer] = fromfile[g] results to index array out of bounds to 10
           BufferedWriter bw = new BufferedWriter(new FileWriter("customers.csv"));
           StringBuilder sb = new StringBuilder();
         //  StringBuilder sb2 = new StringBuilder();
           
           
           int y;
           for(int x = 0; x < cust.length; x++){
             //  sb2.append(itemTo2D[x]);
            //   sb.append(sb2);
               if(cust[x][0] != null){
                for(y = 0; y < cust[0].length; y++){  
                      sb.append(cust[x][y]);
                      sb.append(",");
                  }
             }   
               sb.append("-");  //separation for rows
               sb.append(",");  // separation for columns
                
           }
     
           bw.write(sb.toString());
         //  bw.flush();
           bw.close();
            
       }  catch (Exception ex){
            
         }
       
      }
    
    

    public void readCustomerCSV(){  // reads the contents of the CSV file 
        
//        int read2DStringIndex = 0;
//        int newVarIndexer = 0;
        DefaultTableModel tblmodelll = (DefaultTableModel) mainTable.getModel();  // table
        String[] fromfile = {};   // 1d string for getting the columns(7 columns) of the CSV file
        int ak = 0;
        int sk = 0;
     
    
        try{
             BufferedReader br = new  BufferedReader(new FileReader("customers.csv"));
             String line;
             
             while ((line = br.readLine()) != null){
                fromfile = line.split(",");  //separates the columns by a comma
                 
                for(int c = 0; c < fromfile.length; c++){
                    if(fromfile[c].equals("-")){
                        sk = 0; 

                        ak++;

                        if(c > 0){
                            if(!fromfile[c-1].equals("-")){
                                custIndexer = custIndexer + 1;

                            }

                        }


                       //   br.close();

                    } else{
                        cust[ak][sk] = fromfile[c];

                        sk++;
                    }
                }
            }

            
            
        } catch (Exception ex){
            
        }
        
//        for(int g = 0; g < fromfile.length; g++){  
//             if(fromfile[g].equals("-")){   //if there is a presence of a dash, it increments the read2DStringINdex (row index) of the 2D array     
//                 read2DStringIndex++;
//                  newVarIndexer = 0;
//
//             }
//             else{
//                     cust[read2DStringIndex][newVarIndexer] = fromfile[g];    //cust is the 2D array(declared universal) which is going to display the values to the table   (transfers values of fromfile into cust)
//                     newVarIndexer++;
//               
//
//                    
//
//             }
//           
//        }
       
        
     
        
        
//        for(int h = 0; h < cust.length; h++){  //prints cust (2D array) , just to check what data is being stored
//          for(int p = 0; p < cust[0].length; p++){
//              System.out.println(cust[h][p] + ",");
//           }
//       }
        
        
        
        
        
        
        setrowcount = 0;
 
        for(int r = 0; r < cust.length; r++){
            if(setrowcount == 0){
               tblmodelll.setRowCount(0);
            }           
            if(cust[r][0] != null){  
               tblmodelll.addRow(cust[r]);  //displays the cust(2D array) data to table 
               }
               setrowcount++; 
       }
        System.out.println(custIndexer);
   }
    
    
        
    
 

        
        
        
        
        
        
        
   
    
    
   
    
    
    
 
    
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Products abc = new Products();
        abc.setVisible(true);
//        abc.readCustomerCSVProduct();
//        abc.readCustomerCSVStocks();
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       cid.setEditable(false);
//       readCustomerCSV();
//       readCustomerProductsCSV();
       
       
    }//GEN-LAST:event_formWindowOpened

    
    
    
    
    
    
    
    public static boolean valDOB(String DOB) // Checks if the input date is in valid format or not
    {
        
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        Date BOD = null;
        df.setLenient(false);
        
        try
        {
            BOD = df.parse(DOB);
            return true;
        }
        catch(Exception e)
        {
            return false;
        }
        
    }
            
    
   public static int ageCalc(String xAge){   // Calculates the age
            
       try{
             String[] values = xAge.split("/");
             int month = Integer.parseInt(values[0]);
             int day = Integer.parseInt(values[1]);
             int year = Integer.parseInt(values[2]);
             
             LocalDate today = LocalDate.now();
             LocalDate bdate = LocalDate.of(year, month, day);
             int years = Period.between(bdate, today).getYears();
             
             return years;
       }
       catch(Exception f){
          return 0;
       }
             
             
   }
   
   
    
    
    private void cbdayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbdayKeyReleased
         Boolean et = false;
         String dob = cbday.getText();
         
         Boolean isCorrect = valDOB(dob); // Calls valDOB which checks if the input is in correct date format
         
         
         
        for(int x = 1; x <= dob.length(); x++){  // Iterates(travels) through the birth date input text field
            
            
         if(isCorrect == true && x > 9){  // If isCorrect is true and input is greater than 9(characters), it returns a label message
             
               et = true;
               bdaylabel.setForeground(Color.green);
                bdaylabel.setText("Good Date Format");
             
           
             
         } 
         
         else {     // else, it returns also a label message
                bdaylabel.setForeground(Color.red);
                bdaylabel.setText("Bad Date Format");
         }
         
            
         if(et == true){  // If et is set/equal to true, then we calculate the age from the date string
             String bop = cbday.getText();  // date string
           int calculatedAge =  ageCalc(bop); // Calls ageCalc which calculates the age and stores the ageValue to calculatedAge
             
             if (calculatedAge < 18){ // If calculatedAge < 18 , it returns a label message 
                 bdaylabel.setForeground(Color.red);
                 bdaylabel.setText("No Minors!");
             }
                      
            
            
         }
         
       
     }
        
          if(cbday.getText().length() == 0){
                bdaylabel.setForeground(Color.red);
                bdaylabel.setText("Empty Date input!");
        }
      
     
      
        
    
    }//GEN-LAST:event_cbdayKeyReleased

    private void mainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainTableMouseClicked
        int[] selectRow = mainTable.getSelectedRows();
        cid.setText(mainTable.getValueAt(selectRow[0],0).toString());
        custname.setText(mainTable.getValueAt(selectRow[0],1).toString());
        cname.setText(mainTable.getValueAt(selectRow[0],2).toString());
        custcontact.setText(mainTable.getValueAt(selectRow[0],3).toString());
        cemail.setText(mainTable.getValueAt(selectRow[0],4).toString());
        cbday.setText(mainTable.getValueAt(selectRow[0],5).toString());
        cgender.setSelectedItem(mainTable.getValueAt(selectRow[0],6).toString());
  
        
        int getRow = mainTable.getSelectedRow();
        DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
        custname.setText(tblmodel.getValueAt(getRow,1).toString());
        cname.setText(tblmodel.getValueAt(getRow,2).toString());
        custcontact.setText(tblmodel.getValueAt(getRow,3).toString());
        cemail.setText(tblmodel.getValueAt(getRow,4).toString());
        cbday.setText(tblmodel.getValueAt(getRow,5).toString());
        cgender.setSelectedItem(tblmodel.getValueAt(getRow,6).toString());
        
        DefaultTableModel tblmodel2 = (DefaultTableModel) mainTable2.getModel();
        
        tblmodel2.setRowCount(0); //destroyer of worlds (destroys row if user selects another row 
        for (int x = 0; x < custprod[getRow].length; x++){ //recreate
            if (custprod[getRow][x][0] != null){
                tblmodel2.addRow(custprod[getRow][x]);
            }
        }
      
    }//GEN-LAST:event_mainTableMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
      DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
      int getRowtoDelete = mainTable.getSelectedRow();
      

          messagebox("Delete!", "Record");
          
          deletedID.add(Integer.parseInt(tblmodel.getValueAt(getRowtoDelete,0).toString()));
          Collections.sort(deletedID);
          
        cust[getRowtoDelete] = new String[7]; 
        
        for (int x = 0; x < (cust.length)-1; x++){
            if (cust[x][0] == null){
                cust[x] = cust[x+1];
                cust[x+1] = new String[7];
            }
        }
        custprod[getRowtoDelete] = new String[10][7];
        
        for (int x = 0; x < (custprod.length)-1; x++){
            if (custprod[x][0][0] == null){
                custprod[x] = custprod[x+1];
                custprod[x+1] = new String[10][7];
            }
        }
          
          tblmodel.removeRow(getRowtoDelete);
          
          custIndexer--;
          

        writeDeletedIDCSV();
        writeCustomerCSV();
        writeCustomerProductsCSV();
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int i = mainTable.getSelectedRow();
        DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
        
        messagebox("Update!", "Record");
        
        if(i >= 0){
            
            tblmodel.setValueAt(custname.getText(), i, 1);
            tblmodel.setValueAt(cname.getText(), i, 2);
            tblmodel.setValueAt(custcontact.getText(), i, 3);
            tblmodel.setValueAt(cemail.getText(), i, 4);
            tblmodel.setValueAt(cbday.getText(), i, 5);
            tblmodel.setValueAt(cgender.getSelectedItem(), i, 6);
            
    
        }
        
       
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addProdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProdButtonActionPerformed
        // TODO add your handling code here:
        int getRow = mainTable.getSelectedRow();
        
        int finalUnitPrice = productsclass.calculateUnitPrice();
        String finalProductType = productsclass.getProductType();
        String finalProductDescription = productsclass.getProductDescription();
        productsclass.updateTableValues();
        Date date = Calendar.getInstance().getTime();  
        DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");  
        String strDate = dateFormat.format(date);  
        int x = 0;
        for (x = 0; x < custprod[getRow].length; x++){         // if product exists, then increment on same category 
            if (custprod[getRow][x][2] == finalProductType){
                if (custprod[getRow][x][3] == finalProductDescription){
                    custprod[getRow][x][4] = String.valueOf(Integer.parseInt(custprod[getRow][x][4])+1);
                    break;
                }
            }
        }
        if (x == custprod[getRow].length){     // if not then add a new one  
            int indx2 = nextNullIndex(custprod[getRow]);
            String [] stringCPinputs = {invoice[getRow], String.valueOf(indx2+1), finalProductType, finalProductDescription, "1", String.valueOf(finalUnitPrice), strDate};
            for (int y = 0; y < stringCPinputs.length; y++){
                custprod[getRow][indx2][y] = stringCPinputs[y];
            }
        } 
        
//        productsclass.writeLODCSV();
//        productsclass.readLODCSV();
        writeCustomerProductsCSV();
        productsclass.writeCustomerCSVProduct();
        productsclass.writeCustomerCSVStocks();
//        readCustomerProductsCSV();
        
    }//GEN-LAST:event_addProdButtonActionPerformed

    
    /*
    public String subtotal(){
        int gettDaRow = mainTable.getSelectedRow();
        String subtotalll = "";
        String subtotalll2 = "";
          for(int r = 0; r < custprod[gettDaRow].length; r++){
             
             int quanty = Integer.parseInt(custprod[gettDaRow][r][4]);
             int unitPricey = Integer.parseInt(custprod[gettDaRow][r][5]); 
             int subtotal = quanty * unitPricey;
             String subtotalString = String.valueOf(subtotal);
             
             subtotalll = subtotalString;
            
             
         }  
           return subtotalll;
       
    }
    */
    
    
    
    
    
    
    
    
    
    private void printInvoiceeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInvoiceeeActionPerformed

        Date date = Calendar.getInstance().getTime();  
        DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");  
        String strDate2 = dateFormat.format(date);  
        
        int selectCustRow = mainTable.getSelectedRow();
        int selectCustRowInvoice = mainTable2.getSelectedRow();
        String custNumber = mainTable.getValueAt(selectCustRow, 0).toString();
        String invoiceNumber = mainTable2.getValueAt(selectCustRowInvoice, 0).toString();
        String customerNamee = mainTable.getValueAt(selectCustRow, 1).toString();
        String customerAddress = mainTable.getValueAt(selectCustRow, 2).toString();
        String customerContactt = mainTable.getValueAt(selectCustRow, 3).toString();
        
        
    
        
    
        
        Document doc = new Document(); 
        PdfWriter docWriter = null;
        try{
            Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0));
            Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12);
            String path = "C:\\Users\\RALPH\\Desktop\\EXER 11\\reportt.pdf";
            docWriter = PdfWriter.getInstance(doc, new FileOutputStream(path));
            doc.open();
            float[] columnWidths = {30f, 30f, 30f};
            float[] columnWidths2 = {25f, 20f, 20f, 25f};
             
            float[] columnWidths3 = {30f, 10f, 10f};
            
            PdfPTable table1 = new PdfPTable(columnWidths2);
            PdfPTable table = new PdfPTable(columnWidths);
            PdfPTable table3 = new PdfPTable(columnWidths3);
            
            
            table1.setWidthPercentage(90f);
            Paragraph paragraph = new Paragraph();
            createCell(table1, "Cybernetic Shop", Element.ALIGN_LEFT, 2, bfBold12,0,255,255,255);
            createCell(table1, "Invoice", Element.ALIGN_RIGHT, 2, bfBold12,0,255,255,255);
         //   createCell(table1, "", Element.ALIGN_RIGHT, 4, bfBold12,0,255,255,255);      // separator of cells
            
            createCell(table1, "#125 Baker Street", Element.ALIGN_LEFT, 2, bf12,0,255,255,255);
            createCell(table1, "Date: " + strDate2, Element.ALIGN_RIGHT, 2, bf12,0,255,255,255);
    
            
            
            createCell(table1, "Los Santos, 9000", Element.ALIGN_LEFT, 2, bf12,0,255,255,255);
            createCell(table1, "Invoice# " + invoiceNumber, Element.ALIGN_RIGHT, 2, bf12,0,255,255,255);
  
            
            
            createCell(table1, "Phone: 555-2471 ", Element.ALIGN_LEFT, 2, bf12,0,255,255,255);
            createCell(table1, "Customer# " + custNumber, Element.ALIGN_RIGHT, 2, bf12,0,255,255,255);
            
            createCell(table1, "", Element.ALIGN_RIGHT, 4, bfBold12,0,255,255,255);      // separator of cells
            createCell(table1, "", Element.ALIGN_RIGHT, 4, bfBold12,0,255,255,255);      // separator of cells
            
     
           
            
        



            createCell(table1, "Bill To:", Element.ALIGN_LEFT, 4, bfBold12,0,255,255,255);
            createCell(table1, customerNamee, Element.ALIGN_LEFT, 4, bfBold12,0,255,255,255);   
            
            createCell(table1, customerAddress, Element.ALIGN_LEFT, 4, bfBold12,0,255,255,255);
            createCell(table1, customerContactt, Element.ALIGN_LEFT, 4, bfBold12,0,255,255,255);
            
            
            createCell(table1, "", Element.ALIGN_RIGHT, 4, bfBold12,0,255,255,255);      // separator of cells
            createCell(table1, "", Element.ALIGN_RIGHT, 4, bfBold12,0,255,255,255);      // separator of cells
           
            
            createCell(table1, "Product/Description", Element.ALIGN_CENTER, 2, bfBold12,1,255,255,255);
            createCell(table1, "Quantity", Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
            createCell(table1, "Unit Price", Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
            
            

            
 
        
            for(int v = 0; v < custprod[selectCustRow].length; v++){
                 if (custprod[selectCustRow][v][0] != null){
                     
                     
            createCell(table1, custprod[selectCustRow][v][2] + "" + custprod[selectCustRow][v][3] , Element.ALIGN_CENTER, 2, bfBold12,1,255,255,255);
            createCell(table1, custprod[selectCustRow][v][4], Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
            createCell(table1, custprod[selectCustRow][v][5] , Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
                }
            }
        
              
           int subtotal = 0;
           String stringSubtotal = "";
           String stringtax = "";
           String stringtotall = "";
           double tax = 0;
           double allTotal = 0;
           for(int r = 0; r < custprod[selectCustRow].length; r++){
              if(custprod[selectCustRow][r][0] != null){
              
                int quanty = Integer.parseInt(custprod[selectCustRow][r][4]);
                int unitPricey = Integer.parseInt(custprod[selectCustRow][r][5]);
                subtotal +=  quanty * unitPricey;
                stringSubtotal = Integer.toString(subtotal);
                
                tax = Integer.parseInt(stringSubtotal) * 0.12;
                allTotal = Integer.parseInt(stringSubtotal) + tax;
                
                stringtax = String.valueOf(tax);
                stringtotall = String.valueOf(allTotal);
                
               
              }
         
           }
                createCell(table1, "", Element.ALIGN_CENTER, 2, bfBold12,0,255,255,255);
                createCell(table1,  "SubTotal", Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
                createCell(table1, stringSubtotal , Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
                
              
              
           
               createCell(table1, "", Element.ALIGN_CENTER, 2, bfBold12,0,255,255,255);
               createCell(table1, "Tax 12%", Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
               createCell(table1, stringtax , Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
            
               createCell(table1, "", Element.ALIGN_CENTER, 2, bfBold12,0,255,255,255);
               createCell(table1, "Total", Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
               createCell(table1,  stringtotall, Element.ALIGN_CENTER, 1, bfBold12,1,255,255,255);
             
            
            table.setWidthPercentage(90f);
            
            
            paragraph.add(table1);
            doc.add(paragraph);
            
      
        } catch (Exception ex){
            System.out.print("Can't create PDF");
          }
        
        
          if(doc != null){
             doc.close();
          }
         if(docWriter != null){
             docWriter.close();
             
         }
         
         try{
         Desktop.getDesktop().open(new File("C:\\Users\\RALPH\\Desktop\\EXER 11\\reportt.pdf"));
         } catch(Exception e){
             
         }
            
        
       
    }//GEN-LAST:event_printInvoiceeeActionPerformed
     
    public static void createCell(PdfPTable table, String text, int align, int colspan, Font font, int border, int r, int g, int b){
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
       if(border == 0)
           cell.setBorder(Rectangle.NO_BORDER);
       else
           cell.setBorder(Rectangle.BOX);
       if(text.trim().equalsIgnoreCase("")){
           cell.setMinimumHeight(10f);
       }
       
       cell.setBackgroundColor(new BaseColor(r,g,b));
       table.addCell(cell);
       
        
    }
    
    
    public static void createCellNoBorder(PdfPTable table, String text, int align, int colspan, Font font, int border, int r, int g, int b){
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
    
           cell.setBorder(Rectangle.NO_BORDER);
      
           cell.setBorder(Rectangle.BOX);
       
       cell.setBackgroundColor(new BaseColor(r,g,b));
       table.addCell(cell);
       
        
    }     
    
    
    
    
    
    
    
    
    
    
    
    public int nextNullIndex(String [][] arrayPassed){  //finds the next null
        int z;
        for (z = 0; z < arrayPassed.length; z++){
            if (arrayPassed[z][0] == null){
                break;
            }
        }
        
        
        return z;
    }
    private void messagebox(String msg, String titlebar )  // Returns a prompt message
        {
            JOptionPane.showMessageDialog(null, msg, titlebar, JOptionPane.INFORMATION_MESSAGE);
        }
    
    
    
    public void writeCustomerProductsCSV(){  // everything in this snippet code works fine(it creates a CSV file which stores the inputs of the user)
         int getRowww = mainTable.getSelectedRow();
        try{
           BufferedWriter bw = new BufferedWriter(new FileWriter("customerProducts.csv"));
           StringBuilder sb = new StringBuilder();
            
           int y;
           
           for(int x = 0; x < custprod.length; x++){
               if(custprod[x][0][0] != null){
                  for(y = 0; y < cust[getRowww].length; y++){
                      if(custprod[x][y][0] != null){
                      for(int zed = 0; zed < custprod[getRowww][0].length; zed++){
                        
                        sb.append(custprod[x][y][zed]);
                        sb.append(",");
                    }
                      

                  }
                    sb.append("-");  //separation for rows
                    sb.append(",");  // separation for columns
                }   
   
               }
                sb.append("+");  //separation for rows
                sb.append(",");  // separation for columns
           }
          
            
           bw.write(sb.toString());
           bw.close();
            
       }  catch (Exception ex){
            
         }
       
      }
    
    
    
    
    
     public void readCustomerProductsCSV(){  // reads the contents of the CSV file 
        
//        String [][][] threeDArray = new String[10][10][7];
        int read2DStringIndex2 = 0;
        int newVarIndexer2 = 0;
        int newVarIndexer3 = 0;
        DefaultTableModel tblmodelll2 = (DefaultTableModel) mainTable2.getModel();  // table
        String[] fromfile = {};   // 1d string for getting the columns(7 columns) of the CSV file
        int ak = 0;
        int sk = 0;
        int tk = 0;
     
    
        try{
             BufferedReader br = new  BufferedReader(new FileReader("customerProducts.csv"));
             String line;
             
             while ((line = br.readLine()) != null){
                 fromfile = line.split(",");  //separates the columns by a comma
                 
                 for(int c = 0; c < fromfile.length; c++){
                     if(fromfile[c].equals("-")){
                         sk++;
                         tk = 0;
                         
                      
                       
                     } else if(fromfile[c].equals("+")){
                         ak++;
                         sk = 0;
                         tk = 0;
                         
                     }
                     else{
                         custprod[ak][sk][tk] = fromfile[c];
                         tk++;
                     }
                 }
             }
            
            
            
        } catch (Exception ex){
            
        }
        
//        for(int g = 0; g < fromfile.length; g++){  
//             if(fromfile[g].equals("-")){   //if there is a presence of a dash, it increments the read2DStringINdex2 (row index) of the 3D array     
//                 read2DStringIndex2++;
//                  newVarIndexer2 = 0;
//                  newVarIndexer3 = 0;
//
//             }
//             else{
//                     custproddd[read2DStringIndex2][newVarIndexer2][newVarIndexer3] = fromfile[g];    //custproddd is the 3D array(declared universal) which is going to display the values to the table
//                     newVarIndexer2++;
//                     newVarIndexer3++;
//
//                    
//
//             }
//           
//        }
       
        
     
        
        
//        for(int h = 0; h < custproddd.length; h++){  //prints cust (2D array) , just to check what data is being stored
//          for(int p = 0; p < custproddd[0].length; p++){
//              for(int q = 0; q < custproddd[0][0].length; q++){
//              System.out.println(cust[p][q] + ",");
//              }
//           }
//       }
        
        
        
        
        
        
//        setrowcount2 = 0;
// 
//        for(int r = 0; r < custproddd.length; r++){
//            for(int s = 0; s < custproddd[0].length; s++){
//              if(setrowcount2 == 0){
//                 tblmodelll2.setRowCount(0);
//              }
//              try{                
//              if(custproddd[r][s][0].equals("null") == false){  
//                  tblmodelll2.addRow(custproddd[r][s]);  //displays the cust(2D array) data to table 
//                  
//                }
//              } catch(Exception e){
//                
//                }
//        
//                 setrowcount2++; 
//              }
//         }


 
        
   }
     
public void writeDeletedIDCSV(){
    try{
        BufferedWriter br = new BufferedWriter(new FileWriter("deleteID.csv"));
        StringBuilder sb = new StringBuilder();
        for (int x = 0; x < deletedID.size(); x++ ){
            sb.append(deletedID.get(x));
            sb.append(",");
            
        }
        br.write(sb.toString());
        br.close();
    } catch(Exception ex){
        
    }    
}

public void readDeletedIDCSV(){
    String[] fromfile ={};
    try{
        BufferedReader br = new BufferedReader(new FileReader("deleteID.csv"));
        String line;
        
        while((line = br.readLine()) != null){
            fromfile = line.split(",");
        }
        for (int x = 0; x < fromfile.length; x++){
            deletedID.add(Integer.parseInt(fromfile[x]));
        }
        
        
    } catch (Exception ex){
        
    }
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerForm().setVisible(true);
            }
        });
    }


    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProdButton;
    private javax.swing.JLabel bdaylabel;
    private javax.swing.JTextField cbday;
    private javax.swing.JTextField cemail;
    private javax.swing.JComboBox cgender;
    private javax.swing.JTextField cid;
    private javax.swing.JTextField cname;
    private javax.swing.JTextField custcontact;
    private javax.swing.JTextField custname;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel elabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable mainTable;
    private javax.swing.JTable mainTable2;
    private javax.swing.JButton printInvoiceee;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
